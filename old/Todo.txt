
- Protocol
	<done> - Define the format of the package
		error probe (callback system if needed)
	- Create the drive for PIC
		- Simulate into Proteus
			(One terminal, enter the raw message simulating the income message)
			(One terminal, show the income message pased)
			(One terminal, simulating sending message) 
	<done> - Create the drive for Core .NET
		<done> - Create test project

- Physical
	- USB
		- Define the protocol
		- Create the drive for PIC
	- Wireless
		- Define the physical layers for the modules (nRF905 and HC-12)
			fragmented control?
		- Create the drive for PIC
		- Create the drive for Core .NET (Only for use directly with the Raspberry)

- Module Ribbon Led RGB
	- Define the message format
	- Define how its work
	- Create the drive for PIC
	- Create the power supply
	- Simulate into Proteus

- Service Api
	- Create the .NET service
	- Create the database layer (SQL)
	- Create the core area
		account
			register
			login
	- Create the module area
		type
			incandescent lamp
			ribbon led rgb
		module
			register
			synchronize the module with this control
			edit basic info
				edit type info
	- Create the illumination area
		standards
			register
			edit
			delete
	- Create the service area
		region
			create
			edit
				set modules
			delete
			

- WebUI
	- Home
		start and news (future)
	- Area
		place to access the areas registred and the modules per area
	- Data
		register all data
		- Module
		- RGB Standards
		- Area


	- Create the view controller
		- list all areas
			expand to modules in one area
				expand to the configurations for this module
	- Create the module controller
		- list
		- add
		- edit
		- remove
	- Create the configuration controller
		- Create the area RBG Standards
			- list
			- add
			- edit
			- remove
	- Create the area controller
		- list
		- add
		- edit
		- remove